<?xml version="1.0"?>
<reftext currentVersion="1.0" requiredVersion="0.5"><rs><r ri="1">Technology has a language. It&#x2019;s called code. And we believe coding is an essential skill. Learning to code teaches you how to solve problems and work together  in creative ways. And it helps you build apps that bring your ideas to life. We think everyone should have the opportunity to create something that can change the world. So we&#x2019;ve designed a new approach to coding  that lets anyone learn, write, and teach it.</r><r ri="10">Numbers are wonderful, especially 0 and 1. But for the most part, people  spend a lot more time interacting with text&#x2014;whether it&#x2019;s sending a message, jotting down a reminder, or reading a post online. In this lesson, you&#x2019;ll  learn how computers handle text, and you&#x2019;ll think up some creative string combinations along the way.
</r><r ri="100">Lesson 4  |  First App: Single Photo</r><r ri="101">Lesson 4  |  First App: Single Photo</r><r ri="102">Lesson 4  |  First App: Single Photo</r><r ri="103">Lesson 4  |  First App: Single Photo</r><r ri="104">Lesson 4  |  First App: Single Photo</r><r ri="105">Lesson 4  |  First App: Single Photo</r><r ri="106">Lesson 4  |  First App: Single Photo</r><r ri="107">Lesson 4  |  First App: Single Photo</r><r ri="108">Lesson 4  |  First App: Single Photo</r><r ri="109">Lesson 4  |  First App: Single Photo</r><r ri="11">Open the starter project called &#x201C;QuestionBot.xcodeproj&#x201D; from your curriculum folder and click the Run button  in the Xcode toolbar to run it.
</r><r ri="110">Lesson 4
</r><r ri="111">This cycle of making a change, building and running, and testing the change is common. Sometimes, though, the part of the app you&#x2019;re working on is a long way in or it takes a long time to do whatever it is you&#x2019;re trying to test. 
</r><r ri="112">Choose Simulator &gt; Quit Simulator or press Command-Q on your keyboard.
</r><r ri="113">If you&#x2019;re running an app for the first time, Xcode asks whether you&#x2019;d like  to enable developer mode on your Mac. Developer mode gives Xcode access to certain debugging features without requiring you to enter your password each time. Decide whether you&#x2019;d like to enable developer mode, then follow the prompts.
</r><r ri="114">If you choose not to enable developer mode, you might be asked for your password later on. The lessons assume developer mode is enabled.
</r><r ri="115">Select View Mode. You&#x2019;ll notice that your image has been resized to fill the view (unless you&#x2019;ve used a square image). This is because the View Mode, which you can see under the View heading in the Attributes inspector, is set to Scale To Fill. It&#x2019;s best to choose Aspect Fit for photos, which fits the image inside the view without stretching or squashing it. 
</r><r ri="116">Back in the QuestionBot project, open QuestionAnswerer.swift. Select the entire responseToQuestion function, then paste your function from the playground over the version in the app using the Edit menu (Edit &gt; Paste) or press Command-V (&#x2318;-V). 
</r><r ri="117">A Mac running OS X El Capitan v10.11 or later.
</r><r ri="118">And as you master programming skills, you can shift to doing even more app development. The book will guide you through the steps of building an app in Xcode with tips and videos throughout. Sample Xcode projects are provided so that you can experiment with certain parts of code without having to build the entire app from scratch. 
</r><r ri="119">In the SinglePhoto lesson, you created an Xcode project from scratch. In this lesson, you&#x2019;ll add important functionality to an app that&#x2019;s already in progress. 
</r><r ri="12">People who are new to programming sometimes think that coding is mostly about using numbers. Programmers actually spend much more time thinking about names. A programmer who sees an expression like 4 + 5 is usually more interested in what the 4 and 5 mean (are they minutes? marbles? grapefruits?) than that they add up to 9. Becoming skilled at naming will make you a much better programmer.
</r><r ri="120">In this lesson, you&#x2019;re part of a team that&#x2019;s building a chat app called QuestionBot, focusing on only one part of the app. Your job is to work on  the &#x201C;brain&#x201D; of QuestionBot, the part that decides how to answer questions. The other parts of the app&#x2014;the design, the user interface, the parts that take the question and display the answer&#x2014;are already completed.
</r><r ri="121">This is easier in some ways because you don&#x2019;t have to spend time writing  or designing the app. But it&#x2019;s more challenging in other ways because you have to understand how the app is already working and where you need  to make changes. 
</r><r ri="122">Welcome message
</r><r ri="123">When you&#x2019;re happy with your new color, build and run the app again using the Run button  in the toolbar. Your app is now a little more interesting.
</r><r ri="124">Once you&#x2019;ve built the responseToQuestion function in the playground, it&#x2019;s time to move it back to QuestionBot. You can do this by copying the code from the playground and pasting it in to the app. It&#x2019;s important to be careful when doing this. Pasting the wrong part of code or pasting it in the wrong place can cause errors in the app project.
</r><r ri="125">It&#x2019;s often at this point that programmers realize the importance of code comments, clear structure, and good project organization.
</r><r ri="126">You&#x2019;ll use &#x201C;Build and Run&#x201D; a lot while developing your app, not just when you&#x2019;re done. You&#x2019;ll add the image later, but first take a tour of Xcode.
</r><r ri="127">This is all done with instructions and designs files. No Swift code has been involved&#x2014;yet!
</r><r ri="128">The iPhone 6s Plus Simulator is very large, so click the device name and choose a smaller iPhone, like the iPhone 5s, from the list.
</r><r ri="129">Select the Attributes inspector. The contents of the Attributes inspector will look a little different now that you&#x2019;ve selected an image view. Click  the Attributes inspector button , or choose View &gt; Utilities &gt; Show Attributes Inspector.
</r><r ri="13">For which code expression (Option 1 or Option 2) did you think of more possibilities? Which code expression was more specific? How did that affect the number of different things the expression might mean?
</r><r ri="130">In this exercise, you&#x2019;ll create an app project and look at it in the Xcode workspace view. If it&#x2019;s a bit overwhelming at first, don&#x2019;t worry. You don&#x2019;t  need to know everything about Xcode before you can use it to make  apps. You&#x2019;ll be guided through the process step by step, learning as you  go along.
</r><r ri="132">Use Core Data: Unselected
</r><r ri="134">Simulator can model a number of different types of hardware&#x2014;iPad, iPhone with different screen sizes, and so on&#x2014;so you can simulate your app on every device you&#x2019;re developing for.
</r><r ri="135">You&#x2019;ll start by focusing on fundamental programming concepts, using Swift as the language. You&#x2019;ll use playgrounds to experiment with code and see the  results immediately.
</r><r ri="136">In playgrounds, you can experiment with programming ideas without building an entire app. You&#x2019;ll write some code, watch it run, think about it a bit, change some lines, and watch it run again. Down the road, you  can turn your successful experiments into a fully-featured app, but for  now, just play&#x2014;and learn.
</r><r ri="137">You&#x2019;ve been using playgrounds to experiment with strings and numbers.  But what if you love the &#x201C;Fill in the Blanks&#x201D; game you made and want to share it with a friend without needing to run Xcode again?
</r><r ri="138">Project files for the course, which you can download here. The following files are included in the zip file.
</r><r ri="139">This book will guide you through hands-on activities, including playgrounds and app projects in Xcode.  Follow the instructions in this book to build your programming skills and write your first iOS app. 
</r><r ri="14">How to add notes that will help you remember what your code means 
</r><r ri="140">You&#x2019;re getting more comfortable with playgrounds, and now you might be wondering how to build an app you can use you can use on your iOS device, or even Apple Watch. A lot of moving parts need to work together to make an app run, and Xcode is the best tool for putting them all together.
</r><r ri="141">So far you&#x2019;ve been working in playgrounds, which allow you to focus on code. Apps aren&#x2019;t built just from code, though. There are designs for the  look of the screens. There are images, sounds, and fonts. And there are instructions for putting all these parts together. Xcode manages it all in a workspace. 
</r><r ri="142">Learn more about Swift Playgrounds.
</r><r ri="143">Swift Playgrounds Teacher Guide
</r><r ri="145">Be sure you&#x2019;ve downloaded Xcode to your Mac, then double-click the PlaygroundBasics.playground to begin your first lesson. 
</r><r ri="146">As you progress through each lesson, you&#x2019;ll be directed to open the corresponding playground or Xcode project file where you can explore and learn more.
</r><r ri="147">How to type and change code in a playground 
</r><r ri="148">What else can I do with a playground?
</r><r ri="149">Playground
</r><r ri="15">Build means &#x201C;Assemble all the parts into an app.&#x201D; Run means &#x201C;Start the app,&#x201D; as if you&#x2019;d tapped its icon on the Home screen. Follow the steps below to build and run your app.
</r><r ri="150">Open the &#x201C;01_PlaygroundBasics.playground&#x201D; file in the folder you downloaded and follow the directions.
</r><r ri="151">Playground Basics</r><r ri="152">What surprised you most about using the playground? 
</r><r ri="153">Playground Basics
</r><r ri="154">Open the &#x201C;02_Naming.playground&#x201D; file in the folder you downloaded and follow the directions.</r><r ri="155">Open the &#x201C;03_Strings.playground&#x201D; file in the folder you downloaded and follow the directions.
</r><r ri="156">Which could you achieve with a playground? 
</r><r ri="157">How to take an idea you&#x2019;ve coded in a playground and move it over to use in a real app
</r><r ri="158">Open the &#x201C;QuestionAnswerer.playground&#x201D; from your curriculum folder and work through the exercises to build a working brain  for QuestionBot. 
</r><r ri="159">You saw how to use a playground to adjust one piece of logic or interaction&#x2014;then bring the refined code back into the app once it was just right. Focusing  on one piece at a time makes it easier to be sure each piece works well by itself. And when you build those well-functioning individual pieces into a program, you&#x2019;ll have a much more powerful app.
</r><r ri="16">This is a good way to build an app&#x2014;when each working part knows as little as possible about the others, and each part has only one job to do. It means you can build each part separately, make sure it works exactly right, and then put them all together.
</r><r ri="160">You&#x2019;ll see that whatever question you ask, you get the same answer&#x2014;a question mark. It&#x2019;s your job to make QuestionBot give more useful, or at  least fun, answers.  
</r><r ri="161">Ask another question. Your new answer is there! 
</r><r ri="162">Swift is a powerful and intuitive programming language created by Apple for building apps. It makes programming easier, more flexible, and more fun. Swift is not only great for getting you started with coding,  it&#x2019;s also super powerful. It&#x2019;s designed to scale from writing the simplest program, like &#x201C;hello world,&#x201D; to the  world&#x2019;s most advanced software.
</r><r ri="163">Choose your image. Choose the image you added earlier from the  pull-down menu at the top of the inspector.
</r><r ri="164">Opening Xcode, changing some files, then making it build and run are regular tasks that app developers everywhere do every day. Now you&#x2019;ve used that same process to create your own photo display that could run on any iPhone or iPad. Welcome to the community of app builders!
</r><r ri="166">KEY Vocabulary
</r><r ri="167">KEY Vocabulary
</r><r ri="168">KEY Vocabulary
</r><r ri="169">KEY Vocabulary
</r><r ri="17">Pasting the function in the wrong place in the file. In this case, the  app might not build, and you might see errors such as Invalid redeclaration of responseToQuestion. This means you&#x2019;ve got two functions with the same name in the same part of the code&#x2014;not allowed because it isn&#x2019;t clear which function should run when called.</r><r ri="170">Delete the view.  Press the Backspace or Delete key to remove the view. 
</r><r ri="171">KEY Vocabulary
</r><r ri="173">You now have an image added to your project and an image view to show it. The final stage is to bring the two together.
</r><r ri="175">We recommend keeping this book open as you work through the projects in Xcode. Or you can view the book on your iPad while you work in Xcode on your Mac. 
</r><r ri="176">Image view
</r><r ri="177">Look at the project navigator. If you don&#x2019;t see a list of files like in the  image below, go to the menu bar and choose View &gt; Navigators &gt; Show Project Navigator. Here you&#x2019;ll see a list of all the files in your project.  Choose the SinglePhoto project. Select the app target; a screen like the  one below appears.
</r><r ri="178">The editor is a visual representation of the screen of your app. It&#x2019;s an empty white box, which is exactly what you see when the app runs. Each screen of content in your app is known as a view controller. The small arrow to the left indicates that this is the first view controller that should be loaded when the app is started. A storyboard can contain many view controllers, so you need to mark a starting point.
</r><r ri="179">The contents of that view controller are put on the screen.
</r><r ri="18">What it looks like if something goes wrong
</r><r ri="180">To configure the image view
</r><r ri="181">This video shows you the steps for configuring an image view, which are described in more detail below.
</r><r ri="182">From the document outline (to the left of the main window) with View Controller Scene at the top, choose View, then the Attributes inspector.
</r><r ri="183">Choose a new color for the view.
</r><r ri="184">Add an image view to the view controller
</r><r ri="185">Tell the image view to display your image </r><r ri="186">To add an image view
</r><r ri="187">This video shows you the steps for adding an image view to your app, which are described in detail below.
</r><r ri="188">Select the view. You&#x2019;re going to remove and replace the view with an image view, which is able to show your image.
</r><r ri="189">Drag in an image view. An image view does what you&#x2019;d expect&#x2014;it shows an image. As you drag it onto the view controller, you&#x2019;ll see a highlight appear and the entire view controller fills.
</r><r ri="19">In this case, the files have helpful names, and the questions are answered  in the QuestionAnswerer.swift file. Open the file and review the function highlighted in the image below:
</r><r ri="190">Looking in the project navigator (from the Xcode menu bar, choose View &gt; Navigators &gt; Show Project Navigator), there are only three code files in the app: AppDelegate.swift, ViewController.swift, and QuestionAnswerer.swift. You could look into each file and try to figure out how the app works; in the  real world, sometimes that&#x2019;s the only information available to you.</r><r ri="191">Select View, as shown in the document outline below. Use the Background attribute to choose a different color.
</r><r ri="193">Main Interface. Tells Xcode that there&#x2019;s a storyboard file&#x2014;which holds the screen designs for the app. In this case, the storyboard is called Main. When creating the project, Xcode created this storyboard file and set it as the main interface storyboard for the app.</r><r ri="194">In this two-part lesson, you&#x2019;ll build SinglePhoto&#x2014;a simple iOS app that displays a single photo. In the first exercise, you&#x2019;ll create an app project from scratch, and along the way learn more about using Xcode.
</r><r ri="195">In part two, you&#x2019;ll add an image to your project and edit the user interface.  You&#x2019;ll also get an introduction to Interface Builder&#x2014;a powerful component  of Xcode where you create the user interface of your app. At the end of the second exercise, your app will look like this, but it will display your own photo!</r><r ri="196">Create a new project
</r><r ri="197">To create a new project
</r><r ri="198">If a project window appears instead, it&#x2019;s OK&#x2014;you probably created or opened a project in Xcode previously. Just use the menu item in the next step to create the project. 
</r><r ri="199">These are the pictures, sounds, fonts, and icons used in your app. You don&#x2019;t create these in Xcode, but Xcode needs to know about them so it can build your app.
</r><r ri="2">A program to figure out whether your friend&#x2019;s concert will make or lose money
</r><r ri="20"> Here is the function; notice a helpful //TODO: (&#x201C;to do&#x201D;) comment tells you where you need to do your work:
</r><r ri="200">These are the storyboards and .xib files you  use to lay out the screens of your app. You create and edit these files within Xcode.
</r><r ri="201">Select Assets.xcassets. This opens the Asset Catalog that Xcode has added to your project. It&#x2019;s the best place to keep all the images used in your app. 
</r><r ri="202">func responseToQuestion(question: String) -&gt; String {
</r><r ri="203">You learned that responseToQuestion is a function that takes a String, and returns a String. Currently, the function ignores whatever question is passed in and returns a question mark.</r><r ri="204">let totalVideoDuration = introDuration + (clipDuration * numberOfClips)
</r><r ri="206">Modulo
</r><r ri="208">Check out additional resources to support learning and teaching coding.
</r><r ri="209">Each lesson is designed so that you learn programming concepts as you write code. When you complete each lesson, you can check your understanding by answering review questions in the book.
</r><r ri="21">App Development with Swift is designed to help you build a solid foundation in programming fundamentals using Swift as the language. Throughout this course, you&#x2019;ll get practical experience with the tools, techniques, and concepts needed to build a basic iOS app from scratch. You&#x2019;ll also learn user interface design principles, which are fundamental to programming and making great apps. </r><r ri="210">What might this code be calculating?
</r><r ri="211">What might this code be calculating?
</r><r ri="212">Many programmers say that naming is one of the hardest problems they face, so keep thinking carefully about names while you code your next projects.
</r><r ri="213">Code
</r><r ri="214">Which tasks would you like to achieve  with code? 
</r><r ri="215">Many apps are built by teams of people working together: Designers who think about the way the app looks and how it&#x2019;s used, and developers who write the code to make it happen. Often, different parts of an app can be worked on at the same time. 
</r><r ri="216">Learn more about the Everyone Can Code program.
</r><r ri="217">Check out the other Everyone Can Code books:
</r><r ri="218">What you&#x2019;ll wonder
</r><r ri="219">What you&#x2019;ll wonder 
</r><r ri="22">These files help Xcode put everything together to make your app. Xcode creates most of these automatically, but sometimes you&#x2019;ll have to change parts of them. The project file is the most important instructions file. It contains information about all the other parts and what they&#x2019;re used for during a build.</r><r ri="220">What you&#x2019;ll wonder 
</r><r ri="221">What you&#x2019;ll wonder 
</r><r ri="222">What you&#x2019;ll wonder 
</r><r ri="223">A program to count animals
</r><r ri="224">Types, so you don&#x2019;t accidentally use a string where you need a number
</r><r ri="225">The Attributes inspector is the highlighted icon in this image: 
</r><r ri="226">Adding an image
</r><r ri="227">Add an image to your project (this will be a resources type of file)
</r><r ri="228">To add an image to your project
</r><r ri="229">Drag in the image file. This adds the image to your project and gives it a name. The image is now part of your app.
</r><r ri="23">Organization Identifier: Your organization identifier, if you have one. If you don&#x2019;t, use com.example.
</r><r ri="230">How to use a program to change and combine words 
</r><r ri="231">Check Your Understanding</r><r ri="232">Check Your Understanding</r><r ri="233">Check Your Understanding</r><r ri="234">Check Your Understanding</r><r ri="235">Check Your Understanding</r><r ri="236">With this line: return "I&#x2019;m sorry, I don&#x2019;t understand the question"
</r><r ri="238">Comment out
</r><r ri="239">Comments
</r><r ri="24">Bundle Identifier:  This value is automatically generated based on your product name and organization identifier.
</r><r ri="240">Where to look for the results of your work 
</r><r ri="241">Functions, so you can reuse your calculations and work
</r><r ri="242">Remember, the function you&#x2019;re working on takes just a string and gives a string back. It doesn&#x2019;t need the rest of the app to be running. 
</r><r ri="243">Use the Run button  in the toolbar to build and run your app as you did before to see your photo display.
</r><r ri="244">If you can&#x2019;t see the whole simulator because of the screen size, go to the Window / Scale menu and choose a zoom level that fits the whole simulator on the screen. 
</r><r ri="245">Check out what&#x2019;s ahead in the semester
</r><r ri="246">This video shows you the steps for changing the  background color.
</r><r ri="247"> This video shows you the steps, which are also described  in more detail below. 
</r><r ri="248">Click Next.</r><r ri="249">Click the Run button . 
</r><r ri="25">Variables, so you can give a new value to a name or identifier
</r><r ri="250">If you double-click the opening brace  {  of the function body, Xcode will automatically select everything up to the matching closing brace. Watch this video to see it in action.</r><r ri="251">Clicking the Run button   will tell Xcode to build and run SinglePhoto on the iPhone 6s Plus Simulator. 
</r><r ri="252">For the app you&#x2019;re thinking of, what&#x2019;s an example of an input the brain would take? What&#x2019;s an example of a result it would return to display in the user interface?</r><r ri="253">Connect with others in the Apple Developer Forum.
</r><r ri="254">Congratulations! Not only have you made an app, you&#x2019;ve also made it your own&#x2014;no other app in the world looks like yours. And you&#x2019;ve built it using the same tools that professional developers use every day.</r><r ri="255">App Development with Swift</r><r ri="256">*This App Development with Swift Preview is designed for Xcode v7.3.1.</r><r ri="257">App Development with Swift Teacher Guide
</r><r ri="258">This video shows how to hide and show the navigator area (on the left of the window) and the utility area (on the right  of the window).
</r><r ri="259">For the next section, you&#x2019;ll need to keep the utility area on the right visible, so if you need space, hide only the navigator area on the left.
</r><r ri="261">Camel case
</r><r ri="262">Pasting the function into the wrong file. In this case, the app might build,  but the results won&#x2019;t be what you expect.
</r><r ri="263">Cases
</r><r ri="264">The brains of an app bot that responds differently to different questions
</r><r ri="267">Lesson 10  |  QuestionBot</r><r ri="268">Lesson 10  |  QuestionBot</r><r ri="269">Exploring QuestionBot
</r><r ri="27">Xcode v7.3.1. Download it from the Mac App Store, if you need it.
</r><r ri="270">Lesson 10  |  QuestionBot</r><r ri="271">Lesson 10  |  QuestionBot</r><r ri="272">Build and run, then enjoy your new, improved QuestionBot.
</r><r ri="273">You can use Interface Builder to change the way QuestionBot looks.  Open Main.storyboard, and make sure the Attributes inspector is visible.  See the First App: SinglePhoto lesson for a refresher on how to do this.
</r><r ri="274">Lesson 10  |  QuestionBot</r><r ri="275">Lesson 10  |  QuestionBot</r><r ri="276">QuestionBot
</r><r ri="277">QuestionBot</r><r ri="278">Lesson 10  |  QuestionBot</r><r ri="279">Lesson 10  |  QuestionBot</r><r ri="28">What other kinds of calculations could you store and run in a playground?</r><r ri="280">Lesson 10  |  QuestionBot</r><r ri="281">Lesson 10  |  QuestionBot</r><r ri="282">Lesson 10  |  QuestionBot</r><r ri="283">Results sidebar
</r><r ri="284">You can customize every part of your app&#x2014;from its icon on the Home screen to the way its buttons behave. Lots of panels and controls in Xcode display the many options available to you. In the next chapter, you&#x2019;ll practice using Xcode&#x2019;s Interface Builder to continue customizing your first app.
</r><r ri="285">A lyrics builder for a rallying song
</r><r ri="286">Escape character
</r><r ri="287">Escape sequence
</r><r ri="288">If/else statements, so your app behaves differently in different situations
</r><r ri="29">The storyboard is checked to find a view controller marked as the  starting point.
</r><r ri="290">Choose the color swatch next to Background Color.
</r><r ri="291">Replace this line: return "?"
</r><r ri="292">How can I make an app that not only shows something, but also reacts when a user taps the screen?
</r><r ri="294">To complete the lessons in this guide, you&#x2019;ll need  the following:  
</r><r ri="295">Background color
</r><r ri="296">A bit more about Xcode
</r><r ri="297">Depending on your screen size, you may want to adjust the Xcode window to see more.
</r><r ri="298">Learn more about Swift.
</r><r ri="299">To build and run your app, use the simulator app that&#x2019;s included in Xcode. Simulator gives you an idea of how your app would look and behave if it were running on a device.
</r><r ri="3">You might think programming is difficult because it&#x2019;s hard to keep all the different parts of a program in your head. Programmers struggle with this, too. But the secret is that they make it easier for themselves by combining calculations into groups, giving those groups names, and then combining those group names into other groups. You&#x2019;ve just experienced this in the playground exercises in this chapter&#x2014;you gave names to some ideas, like calculated costs for concert tickets, and then used those names to do other things, like finding out whether your musical event was a financial success.
</r><r ri="30">Open the object library. This area under the inspector holds all the objects you can add to a storyboard. Take some time to look at all the different objects&#x2014;these are the components from which all apps are  built. Scroll through until you find an image view.
</r><r ri="302">In this lesson, you&#x2019;re going to make some changes to the storyboard and see what difference that makes to the running app.
</r><r ri="303">Build and run to see your changes, which should look something like this:</r><r ri="304">If I decide to add a new answer to QuestionBot&#x2019;s brain, how can I make sure the change doesn&#x2019;t accidentally break a previous answer?
</r><r ri="305">Changing the answer
</r><r ri="306">A program to decide how you can use your time to  have a better morning
</r><r ri="307">Lesson 10
</r><r ri="308">Open Xcode from the /Applications directory. The &#x201C;Welcome  to Xcode&#x201D; window appears.
</r><r ri="309">These buttons appear in the toolbar at the top of the Xcode window:
</r><r ri="31">Find tools and resources for creating apps and accessories for Mac, iPhone, iPad, Apple Watch, and Apple TV. 
</r><r ri="310">In this part of the lesson, you&#x2019;re going to add new content to the storyboard, which then will appear in your app.
</r><r ri="311">Putting it all together
</r><r ri="312">You&#x2019;ll see the simulator start up, then show the Home screen, then start your app. Congratulations&#x2014;you made an app! 
</r><r ri="314">Attributes inspector
</r><r ri="315">Here&#x2019;s a summary of what you&#x2019;ve learned so far about what happens when your app is run:
</r><r ri="316">In the next lesson, you&#x2019;ll explore how to make an app in Xcode.</r><r ri="317">How to make your app do different things in different situations
</r><r ri="318">Project. Allows you to select the whole project or an individual target. Targets are what your project makes. This project has only one target, the app, but other projects might have a watchOS app, tvOS app, or other target. &#13;</r><r ri="319">A programming setup that you can type in and get answers to basic calculations
</r><r ri="32">Finding where your code fits in
</r><r ri="321">Project navigator. Shows you a list of all the files in your project.&#13;</r><r ri="323">Organization Name: The name of your organization or your own name. You can leave this blank.
</r><r ri="324">Instructions
</r><r ri="325">Summary
</r><r ri="326">Summary
</r><r ri="327">Summary</r><r ri="328">Summary
</r><r ri="329">Summary
</r><r ri="33">So far in this App Development with Swift preview, you&#x2019;ve increased  your programming skills bit by bit. There will be additional programs  in the final course that will cover additional topics. Those chapters are still being developed, but in the meantime we&#x2019;ve included in this preview QuestionBot&#x2014;an Xcode project that challenges you to stretch both your reasoning and your creativity. In the final course, you would have covered these topics prior to embarking on the QuestionBot lesson: 
</r><r ri="330">What you&#x2019;ll build 
</r><r ri="331">What you&#x2019;ll LEARN 
</r><r ri="332">What you&#x2019;ll build 
</r><r ri="333">What you&#x2019;LL LEARN
</r><r ri="334">What you&#x2019;ll build 
</r><r ri="335">What you&#x2019;LL LEARN
</r><r ri="336">What you&#x2019;ll build 
</r><r ri="337">What you&#x2019;LL LEARN
</r><r ri="338">What you&#x2019;ll build 
</r><r ri="339">What you&#x2019;LL LEARN
</r><r ri="34">You worked on simple problems in a real programming environment and saw the results of the computer doing some work for you. You even saw an error from some mistyped instructions and checked where it was coming from so you could fix the issue. Now you&#x2019;re ready to start one of the most fundamental concepts in programming&#x2014;using names to label your work. Labeling your work allows you to reuse and remix the results so the computer can solve increasingly harder problems.</r><r ri="343">You&#x2019;re going to do the following:
</r><r ri="345">GO BUILD
</r><r ri="346">Go BUILD
</r><r ri="347">A program to build a silly fill-in-the-blanks game
</r><r ri="348">Go BUILD
</r><r ri="349">How to use Xcode to build and run an app
</r><r ri="35">Why writing code to solve a problem is preferable  to writing things down and figuring out solutions  on your own
</r><r ri="350">Which would you build an app to support?</r><r ri="351">Build and run the app.
</r><r ri="352">GO BUILD
</r><r ri="353">GO BUILD
</r><r ri="354">Building and running your app
</r><r ri="357">Assignment operator
</r><r ri="358">Using this book
</r><r ri="36">What if I want to use information or solve problems  that aren&#x2019;t just about numbers?
</r><r ri="360">Simulator
</r><r ri="361">An app that displays a photo
</r><r ri="362">Curriculum Advances</r><r ri="363">To access these materials, you might need to enter the administrator name and password for your Mac.
</r><r ri="366">Autocompletion
</r><r ri="367">  return "?"
</r><r ri="369">Devices: iPhone
</r><r ri="37">Lesson 2: Naming and Constants: Naming and Constants 
</r><r ri="370">Additional resources</r><r ri="371">Additional Resources</r><r ri="372">Additional Resources
</r><r ri="373">Going further with Xcode
</r><r ri="374">Gather your materials
</r><r ri="375">Include UI Tests: Unselected</r><r ri="377">Storyboard
</r><r ri="378">Back in the project navigator, choose the file called Main.storyboard. 
</r><r ri="379">The Main Interface setting for the target is set to Main.storyboard.
</r><r ri="38">Naming and Constants</r><r ri="380">Main.storyboard</r><r ri="381">Editing the storyboard 
</r><r ri="383">Robot head 
</r><r ri="384">Lesson Review
</r><r ri="385">Lesson Review
</r><r ri="386">Lesson Review
</r><r ri="387">Lesson Review
</r><r ri="388">Lesson Review
</r><r ri="389">Bonus exercises&#x2014;customizing the interface
</r><r ri="39">Lesson 2  |  Naming and Constants</r><r ri="390">Reflections&#13;</r><r ri="391">Reflections
</r><r ri="392">Reflections&#13;</r><r ri="393">Reflections&#13;</r><r ri="394">Reflections 
</r><r ri="396">String interpolation
</r><r ri="397">Strings</r><r ri="398">Strings</r><r ri="399">Strings
</r><r ri="4">Before you start, you need a photo or image file. It can be fun to use the Photo Booth app to take a selfie, or you can use something you already have. Make sure you have the image file handy on the desktop.
</r><r ri="40">Lesson 2  |  Naming and Constants</r><r ri="400">Strings</r><r ri="402">Unicode </r><r ri="406">Characters
</r><r ri="41">Lesson 2  |  Naming and Constants</r><r ri="410">Assignment
</r><r ri="414">Quick Look button
</r><r ri="418">Language: Swift 
</r><r ri="42">Naming and Constants
</r><r ri="421">  // TODO: Write a response 
</r><r ri="422">Default answer
</r><r ri="423">GO EXPLORE
</r><r ri="424">Welcome</r><r ri="427">Getting started</r><r ri="429">Designs
</r><r ri="431">Exploring your project 
</r><r ri="433">Introduction</r><r ri="434">Introduction</r><r ri="435">Introduction</r><r ri="437">Resources
</r><r ri="438">Project navigator
</r><r ri="44">Constant
</r><r ri="441">Error
</r><r ri="45">Rather than running the app several times, you can use a playground to  get the question-answering code up and running more quickly. You can see multiple results instantly; no need to rerun. Once you&#x2019;re happy with your code, you can paste it into the app and you&#x2019;re done. 
</r><r ri="46">Xcode is used to manage all the different files used to create an app. Four main types of files go into an app:</r><r ri="47">How to use text in programming 
</r><r ri="48">What counts as text to a computer
</r><r ri="49">How do I use text that I didn&#x2019;t type into the playground myself?
</r><r ri="5">Some of the best apps put together simple components in fresh ways; in this app, you&#x2019;ll do some behind-the-scenes string manipulation to give voice to a chat bot. Whether snarky, silly, or sage, your chat bot&#x2019;s responses will be powered entirely by your own creativity&#x2014;and your code.
</r><r ri="50">What apps do you use that show text?
</r><r ri="51">What apps do you enter text into by typing or dictating? 
</r><r ri="52">Do apps you use behave differently depending on what text you enter?</r><r ri="53">These are text files containing the Swift code. There will be a lot of these, and you&#x2019;ll create and edit them from within Xcode.
</r><r ri="54">Change the function so it returns some text instead of a question mark. 
</r><r ri="55">On the Putting It All Together page of the playground where you built the final version of the function, use the trick you just learned to select the entire function body, then copy the text using the Edit menu (Edit &gt; Copy) or press Command-C (&#x2318;-C). 
</r><r ri="56">If your app won&#x2019;t build and run, the problem is likely with pasting the code. Undo the paste you just did using Edit menu (Edit &gt; Undo Paste) or press Command-Z (&#x2318;-Z), double-check the selected text and the location, and try again. For hints, look at the errors that Xcode is giving you. Following are  some common problems:
</r><r ri="57">Select the   label as shown in the document outline below. Using the Text attribute in the inspector, change the emoji to a different character. Press Ctrl-&#x2318;-Space to bring up the emoji picker.
</r><r ri="58">Select Response Label in the document outline and change the opening text. Press Ctrl-Enter to add a new line if you need one.
</r><r ri="59">Many apps use this same architecture, where the app has a separate &#x201C;brain&#x201D; that tells the user interface what to display. Think of an app that you use, and imagine what its brain&#x2019;s job would be. For example, QuestionBot takes in a string question and returns a string answer. So if you input &#x201D;Should I sing out loud?&#x201D;, the result will be &#x201C;Probably.&#x201D; 
</r><r ri="6">&#xA9; 2016 Apple Inc. All rights reserved. Apple, the Apple logo, Apple TV, Apple Watch, Cocoa, Cocoa Touch, iPad, iPhone, iPod, Mac, OS X, watchOS, and Xcode are trademarks of Apple Inc., registered  in the U.S. and other countries. iPad Pro, Swift, and tvOS are trademarks of Apple Inc. App Store is a service mark of Apple Inc., registered in the U.S. and other countries. iOS is a trademark or  registered trademark of Cisco in the U.S. and other countries and is used under license. Other product and company names mentioned herein may be trademarks of their respective companies.</r><r ri="60">Product Name: SinglePhoto  Xcode uses the product name you entered to name your project and the app.
</r><r ri="61">In the iOS section at the left of the dialog, select Application. 
</r><r ri="62">In the main area of the dialog, click Single View Application and then  click Next.
</r><r ri="63">In the dialog that appears, use the following values to the left to name your app and choose additional options for your project:
</r><r ri="64">In the dialog that appears, select a location to save your project and click Create. Xcode opens a workspace window showing your new project. You don&#x2019;t need to worry about every part of the screen just yet.
</r><r ri="65">Xcode includes several built-in app templates for developing common  types of iOS apps, such as games, apps with tab-based navigation, and  table view&#x2013;based apps. Most of these templates have a preconfigured interface and source code files. For this lesson, you&#x2019;ll start with the most basic template, called Single View Application.</r><r ri="66">In the welcome window, click &#x201C;Create a new Xcode project&#x201D; (or choose  File &gt; New &gt; Project). Xcode opens a new window where you can choose a template.</r><r ri="67">Because you based your project on an Xcode template, the basic app environment is automatically set up for you. So even though you haven&#x2019;t written any code, you could actually build and run the Single View Application template without any additional configuration.
</r><r ri="68">Lesson 1: Playground Basics Playground: Basics Playground Basics 
</r><r ri="69">Lesson 1  |  Playground Basics</r><r ri="7">Close inspectors and open navigators. If you&#x2019;re working on a smaller screen, this will help you see what&#x2019;s happening. Close the inspectors (on the right) and open the navigators (on the left). If you&#x2019;ve got more room, you can just open the project navigator.
</r><r ri="70">Lesson 1  |  Playground Basics</r><r ri="71">Lesson 1  |  Playground Basics</r><r ri="72">Lesson 1
</r><r ri="73">// Option 1
</r><r ri="74">First App: Single Photo&#x2014;Part 1</r><r ri="75">First App: Single Photo&#x2014;Part 1
</r><r ri="76">Lesson 2
</r><r ri="77">// Option 2
</r><r ri="78">First App: Single Photo&#x2014;Part 2</r><r ri="79">First App: Single Photo&#x2014;Part 2
</r><r ri="8">Return to the storyboard. Now that you&#x2019;ve got the image, you want to add it to the view controller, so you need to go back and open Main.storyboard. If you need some room, hide the navigators on the  left, and show the inspectors on the right. 
</r><r ri="80">let total = 4 + (7 * 3)&#13;</r><r ri="81">Lesson 3: Strings 
</r><r ri="82">Lesson 3  |  Strings</r><r ri="83">Lesson 3  |  Strings</r><r ri="84">Lesson 3  |  Strings</r><r ri="85">Lesson 3
</r><r ri="86">Lesson 4: First App</r><r ri="87">Lesson 4  |  First App: Single Photo</r><r ri="88">Lesson 4  |  First App: Single Photo</r><r ri="89">Lesson 4  |  First App: Single Photo</r><r ri="9">Include Unit Tests: Unselected
</r><r ri="90">Lesson 4  |  First App: Single Photo</r><r ri="91">Lesson 4  |  First App: Single Photo</r><r ri="92">Lesson 4  |  First App: Single Photo</r><r ri="93">Lesson 4  |  First App: Single Photo</r><r ri="94">Lesson 4  |  First App: Single Photo</r><r ri="95">Lesson 4  |  First App: Single Photo</r><r ri="96">Lesson 4  |  First App: Single Photo</r><r ri="97">Lesson 4: First App 
</r><r ri="98">Lesson 4
</r><r ri="99">Lesson 4  |  First App: Single Photo</r></rs></reftext>
